{"version":3,"sources":["node_modules/browser-pack/_prelude.js","sources/js/main.js","sources/js/modules/controller.js","sources/js/modules/model.js","sources/js/modules/view.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_controller","_model","_view","targetElement","document","getElementById","model","_model2","default","view","_view2","$elem","controller","_controller2","init","Controller","_classCallCheck","this","interval","keyCode","KEY","LEFT","dir","RIGHT","UP","DOWN","clearMatrix","startGame","cols","Math","floor","offsetWidth","matrix","y","rows","offsetHeight","x","addMatrix","min","max","rand","random","round","row","col","cellAddress","querySelectorAll","cell","getCellNode","classList","contains","removeFood","foodRow","randomInteger","foodCol","getCellSnake","setFood","createFood","drawSnake","drawFood","serNum","body","console","log","unshift","serialNumber","move","getAttribute","headCell","gameOver","clearInterval","onClickReload","bind","addRelaodBtn","that","setTimeout","moveSnake","getFood","setCellSnake","pop","playscore","addPlayscore","stepSpeed","gamePlay","onTapMovement","calculateRowsCols","Model","conf","View","k","div","createElement","add","setAttribute","appendChild","insert","toggle","button","innerText","addEventListener","remove","score","scoreEl","querySelector","span","btn","item"],"mappings":"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","file":"main.bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import Controller from './modules/controller';\r\nimport Model from './modules/model';\r\nimport View from './modules/view';\r\n\r\n\r\n\r\n\r\nlet targetElement = document.getElementById('poligon');\r\n\r\nlet model = new Model(),\r\n    view = new View({$elem: targetElement}),\r\n    controller = new Controller(view, model);\r\n    controller.init();\r\n","export default class Controller {\r\n    constructor(view, model) {\r\n        this.model = model;\r\n        this.view = view;\r\n        this.interval = null;\r\n    }\r\n\r\n    onTapMovement(e) {\r\n        if (e.keyCode == this.model.KEY.LEFT && this.model.dir != 'right') {\r\n            this.model.dir = 'left';\r\n        } else if (e.keyCode == this.model.KEY.RIGHT && this.model.dir != 'left') {\r\n            this.model.dir = 'right';\r\n        } else if (e.keyCode == this.model.KEY.UP && this.model.dir != 'down') {\r\n            this.model.dir = 'up';\r\n        } else if (e.keyCode == this.model.KEY.DOWN && this.model.dir != 'up') {\r\n            this.model.dir = 'down';\r\n        }\r\n    }\r\n\r\n    onClickReload(e) {\r\n        this.view.clearMatrix();\r\n        this.startGame();\r\n    }\r\n\r\n    calculateRowsCols() {\r\n        this.model.cols = Math.floor(this.view.$elem.offsetWidth / this.model.matrix.y);\r\n        this.model.rows = Math.floor(this.view.$elem.offsetHeight / this.model.matrix.x);\r\n        this.view.addMatrix(this.model.cols, this.model.rows);\r\n    }\r\n\r\n    randomInteger(min, max) {\r\n        let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n        return Math.round(rand);\r\n    }\r\n\r\n    getCellNode(row, col) {\r\n        let cellAddress = (row - 1) * this.model.cols + col - 1;\r\n        return this.view.$elem.querySelectorAll('.cell')[cellAddress];\r\n    }\r\n\r\n    getCellSnake(row, col) {\r\n        let cell = this.getCellNode(row, col);\r\n        if (cell && cell.classList.contains('snake')) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getFood(row, col) {\r\n        let cell = this.getCellNode(row, col);\r\n        if (cell && cell.classList.contains('food')) {\r\n            this.view.removeFood(cell);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    createFood() {\r\n        this.model.foodRow = this.randomInteger(1, this.model.rows);\r\n        this.model.foodCol = this.randomInteger(1, this.model.cols);\r\n\r\n        if (!this.getCellSnake(this.model.foodRow, this.model.foodCol)) {\r\n            this.setFood(this.model.foodRow, this.model.foodCol);\r\n        } else {\r\n            this.createFood();\r\n        }\r\n    }\r\n\r\n    setCellSnake(row, col) {\r\n        let cell = this.getCellNode(row, col);\r\n        this.view.drawSnake(cell);\r\n    }\r\n\r\n    setFood(row, col) {\r\n        let cell = '';\r\n        if (this.getCellSnake(row, col)) {\r\n            cell = this.getCellNode(this.randomInteger(1, this.model.rows), this.randomInteger(1, this.model.cols));\r\n        } else {\r\n            cell = this.getCellNode(row, col);\r\n        }\r\n        this.view.drawFood(cell);\r\n\r\n    }\r\n\r\n    move(serNum) {\r\n        switch (this.model.dir) {\r\n            case 'left':\r\n                if (serNum.col <= 1) {\r\n                    this.model.body[0].y = this.model.cols;\r\n                } else {\r\n                    this.model.body[0].y = this.model.body[1].y - 1;\r\n                }\r\n                this.model.body[0].x = this.model.body[1].x;\r\n                break;\r\n\r\n            case 'right':\r\n                if (serNum.col >= this.model.cols) {\r\n                    this.model.body[0].y = 1;\r\n                } else {\r\n                    this.model.body[0].y = this.model.body[1].y + 1;\r\n                }\r\n                this.model.body[0].x = this.model.body[1].x;\r\n                break;\r\n\r\n            case 'up':\r\n                if (serNum.row <= 1) {\r\n                    this.model.body[0].x = this.model.rows;\r\n                } else {\r\n                    this.model.body[0].x = this.model.body[1].x - 1;\r\n                }\r\n                this.model.body[0].y = this.model.body[1].y;\r\n                break;\r\n\r\n            case 'down':\r\n                if (serNum.row >= this.model.rows) {\r\n                    this.model.body[0].x = 1;\r\n                } else {\r\n                    this.model.body[0].x = this.model.body[1].x + 1;\r\n                }\r\n                this.model.body[0].y = this.model.body[1].y;\r\n                break;\r\n\r\n            default:\r\n                console.log('default');\r\n        }\r\n    }\r\n\r\n    moveSnake() {\r\n        this.model.body.unshift({});\r\n        let serialNumber = this.serialNumber();\r\n        this.move(serialNumber);\r\n    }\r\n\r\n    serialNumber() {\r\n        let cell = this.getCellNode(this.model.body[1].x, this.model.body[1].y);\r\n        return {row: cell.getAttribute('data-row'), col: cell.getAttribute('data-column')};\r\n    }\r\n\r\n    gameOver() {\r\n        let headCell = this.getCellNode(this.model.body[1].x, this.model.body[1].y);\r\n        this.view.gameOver(headCell);\r\n        clearInterval(this.interval);\r\n        this.view.onClickReload = this.onClickReload.bind(this);\r\n        this.view.addRelaodBtn();\r\n    }\r\n\r\n    gamePlay() {\r\n        let that = this;\r\n\r\n        this.interval = setTimeout(function () {\r\n            that.moveSnake();\r\n            if (!that.getFood(that.model.body[0].x, that.model.body[0].y)) {\r\n                that.setCellSnake(that.model.body[that.model.body.length - 1].x, that.model.body[that.model.body.length - 1].y);\r\n                that.model.body.pop();\r\n            } else {\r\n                that.model.playscore++;\r\n                that.view.addPlayscore(that.model.playscore);\r\n                that.model.interval = (that.model.interval <= 54) ? that.model.interval: that.model.interval - that.model.stepSpeed;\r\n                that.createFood();\r\n            }\r\n            if (that.getCellSnake(that.model.body[0].x, that.model.body[0].y)) {\r\n                that.gameOver();\r\n                return;\r\n            }\r\n            that.setCellSnake(that.model.body[0].x, that.model.body[0].y);\r\n            that.gamePlay();\r\n        }, that.model.interval);\r\n    }\r\n\r\n    startGame() {\r\n        this.model.body = [{x: 1, y: 3}, {x: 1, y: 2}, {x: 1, y: 1}];\r\n        this.model.dir = 'right';\r\n        this.model.interval = 350;\r\n        this.model.playscore = 0;\r\n        this.setCellSnake(this.model.body[0].x, this.model.body[0].y);\r\n        this.setCellSnake(this.model.body[1].x, this.model.body[1].y);\r\n        this.setCellSnake(this.model.body[2].x, this.model.body[2].y);\r\n        this.gamePlay();\r\n        this.createFood();\r\n    }\r\n\r\n    init() {\r\n        this.view.onTapMovement = this.onTapMovement.bind(this);\r\n        this.calculateRowsCols();\r\n        this.startGame();\r\n    }\r\n}","export default class Model {\r\n    constructor(conf) {\r\n        this.interval = 350;\r\n        this.playscore = 0;\r\n        this.body = [{x: 1, y: 3}, {x: 1, y: 2}, {x: 1, y: 1}];\r\n        this.dir = 'right';\r\n        this.rows = 0;\r\n        this.cols = 0;\r\n        this.stepSpeed = 15;\r\n        this.matrix = {x: 20, y: 20};\r\n        this.foodRow = 0;\r\n        this.foodCol = 0;\r\n        this.KEY = {\r\n            'LEFT': 37,\r\n            'RIGHT': 39,\r\n            'UP': 38,\r\n            'DOWN': 40\r\n        };\r\n    }\r\n}","export default class View {\r\n    constructor(conf) {\r\n        this.$elem = conf.$elem;\r\n        this.onTapMovement = null;\r\n        this.onClickReload = null;\r\n    }\r\n\r\n    addMatrix(cols, rows) {\r\n        for (let i = 1; i <= cols; i++) {\r\n            for (let k = 1; k <= rows; k++) {\r\n                let div = document.createElement('div');\r\n                div.classList.add('cell');\r\n                div.setAttribute('data-row', i);\r\n                div.setAttribute('data-column', k);\r\n                this.$elem.appendChild(div);\r\n            }\r\n        }\r\n        this.insert();\r\n    }\r\n\r\n    drawSnake(cell) {\r\n        cell.classList.toggle('snake');\r\n    }\r\n\r\n    drawFood(cell) {\r\n        cell.classList.toggle('food');\r\n    }\r\n\r\n    addRelaodBtn() {\r\n        let button = document.createElement('a');\r\n        button.classList.add('btn');\r\n        button.innerText = 'Начать сначала!';\r\n        this.$elem.appendChild(button);\r\n        button.addEventListener('click', this.onClickReload);\r\n    }\r\n\r\n    removeFood(cell) {\r\n        cell.classList.remove('food');\r\n    }\r\n\r\n    gameOver(headCell) {\r\n        headCell.classList.add('snake-error-head');\r\n    }\r\n\r\n    addPlayscore(score) {\r\n        let scoreEl = this.$elem.querySelector('.score');\r\n        if(!scoreEl) {\r\n            let span = document.createElement('span');\r\n            span.classList.add('score');\r\n            span.innerText = 'Результат:' + score;\r\n            this.$elem.appendChild(span);\r\n        } else {\r\n            scoreEl.innerText = 'Результат:' + score;\r\n        }\r\n    }\r\n\r\n    clearMatrix() {\r\n        let cell = this.$elem.querySelectorAll('.cell');\r\n        let btn = this.$elem.querySelector('.btn');\r\n        let scoreEl = this.$elem.querySelector('.score');\r\n\r\n        for (let i = 0; i < cell.length; i++) {\r\n            let item = cell[i];\r\n            if (item.classList.contains('snake') || item.classList.contains('food')) {\r\n                item.classList.remove('snake', 'food', 'snake-error-head');\r\n            }\r\n        }\r\n        scoreEl.remove();\r\n        btn.remove();\r\n    }\r\n\r\n    insert() {\r\n        document.addEventListener('keyup', this.onTapMovement);\r\n    }\r\n}"]}